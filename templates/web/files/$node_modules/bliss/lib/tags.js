// Generated by CoffeeScript 1.3.3
var Access, Anchor, Block, Content, DoWhile, Else, For, Func, Group, If, Invoke, Member, Parameters, ScriptBlock, Tag, Value, While,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Tag = (function() {

  function Tag() {}

  Tag.prototype.tag = true;

  Tag.prototype.name = void 0;

  Tag.prototype.parts = function() {
    return [];
  };

  return Tag;

})();

Anchor = (function(_super) {

  __extends(Anchor, _super);

  Anchor.prototype.name = 'Anchor';

  function Anchor(content) {
    this.content = content;
  }

  Anchor.prototype.parts = function() {
    return ['@', this.content];
  };

  return Anchor;

})(Tag);

Content = (function(_super) {

  __extends(Content, _super);

  Content.prototype.name = 'Content';

  function Content(content) {
    this.content = content;
  }

  Content.prototype.parts = function() {
    return [this.content];
  };

  return Content;

})(Tag);

Group = (function(_super) {

  __extends(Group, _super);

  Group.prototype.name = 'Group';

  function Group(content) {
    this.content = content;
  }

  Group.prototype.parts = function() {
    return ['(', this.content, ')'];
  };

  return Group;

})(Tag);

Block = (function(_super) {

  __extends(Block, _super);

  Block.prototype.name = 'Block';

  function Block(content) {
    this.content = content;
  }

  Block.prototype.parts = function() {
    return ['{', this.content, '}'];
  };

  return Block;

})(Tag);

ScriptBlock = (function(_super) {

  __extends(ScriptBlock, _super);

  ScriptBlock.prototype.name = 'ScriptBlock';

  function ScriptBlock(content) {
    this.content = content;
  }

  ScriptBlock.prototype.parts = function() {
    return ['{', this.content, '}'];
  };

  return ScriptBlock;

})(Tag);

If = (function(_super) {

  __extends(If, _super);

  If.prototype.name = 'If';

  function If(test, block, _else) {
    this.test = test;
    this.block = block;
    this["else"] = _else;
  }

  If.prototype.parts = function() {
    return ['if', this.test, this.block, this["else"]];
  };

  return If;

})(Tag);

Else = (function(_super) {

  __extends(Else, _super);

  Else.prototype.name = 'Else';

  function Else(content) {
    this.content = content;
  }

  Else.prototype.parts = function() {
    return ['else ', this.content];
  };

  return Else;

})(Tag);

For = (function(_super) {

  __extends(For, _super);

  For.prototype.name = 'For';

  function For(test, block) {
    this.test = test;
    this.block = block;
  }

  For.prototype.parts = function() {
    return ['for', this.test, this.block];
  };

  return For;

})(Tag);

While = (function(_super) {

  __extends(While, _super);

  While.prototype.name = 'While';

  function While(test, block) {
    this.test = test;
    this.block = block;
  }

  While.prototype.parts = function() {
    return ['while', this.test, this.block];
  };

  return While;

})(Tag);

DoWhile = (function(_super) {

  __extends(DoWhile, _super);

  DoWhile.prototype.name = 'DoWhile';

  function DoWhile(block, test) {
    this.block = block;
    this.test = test;
  }

  DoWhile.prototype.parts = function() {
    return ['do', this.block, 'while', this.test, ';'];
  };

  return DoWhile;

})(Tag);

Func = (function(_super) {

  __extends(Func, _super);

  Func.prototype.name = 'Func';

  function Func(identifier, args, block) {
    this.identifier = identifier;
    this.args = args;
    this.block = block;
  }

  Func.prototype.parts = function() {
    return ['function ', this.identifier, this.args, this.block];
  };

  return Func;

})(Tag);

Parameters = (function(_super) {

  __extends(Parameters, _super);

  Parameters.prototype.name = 'Parameters';

  function Parameters(parameters) {
    this.parameters = parameters;
  }

  Parameters.prototype.parts = function() {
    return [this.parameters];
  };

  return Parameters;

})(Tag);

Value = (function(_super) {

  __extends(Value, _super);

  Value.prototype.name = 'Value';

  function Value(identifier, next) {
    this.identifier = identifier;
    this.next = next;
  }

  Value.prototype.parts = function() {
    return [this.identifier, this.next];
  };

  return Value;

})(Tag);

Member = (function(_super) {

  __extends(Member, _super);

  Member.prototype.name = 'Member';

  function Member(value) {
    this.value = value;
  }

  Member.prototype.parts = function() {
    return [this.value];
  };

  return Member;

})(Tag);

Access = (function(_super) {

  __extends(Access, _super);

  Access.prototype.name = 'Access';

  function Access(content) {
    this.content = content;
  }

  Access.prototype.parts = function() {
    return ['[', this.content, ']'];
  };

  return Access;

})(Tag);

Invoke = (function(_super) {

  __extends(Invoke, _super);

  Invoke.prototype.name = 'Invoke';

  function Invoke(content) {
    this.content = content;
  }

  Invoke.prototype.parts = function() {
    return ['(', this.content, ')'];
  };

  return Invoke;

})(Tag);

if (module !== void 0) {
  module.exports = {
    Tag: Tag,
    Anchor: Anchor,
    Content: Content,
    Group: Group,
    Block: Block,
    ScriptBlock: ScriptBlock,
    If: If,
    Else: Else,
    For: For,
    While: While,
    DoWhile: DoWhile,
    Func: Func,
    Parameters: Parameters,
    Value: Value,
    Member: Member,
    Access: Access,
    Invoke: Invoke
  };
}
